# %%
import os  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
import sys  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
from pathlib import Path  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
mod = sys.modules[__name__]
code_dir = None
code_dir_name = 'Code'
unwanted_subdir_name = 'Analysis'
for _ in range(5):
parent_path = str(Path.cwd().parents[_]).split('/')[-1]
if (code_dir_name in parent_path) and (unwanted_subdir_name not in parent_path):
code_dir = str(Path.cwd().parents[_])
if code_dir is not None:
break
# %%
# Set paths
# MAIN DIR
main_dir = f'{str(Path(code_dir).parents[0])}/'
# code_dir
code_dir = f'{code_dir}/'
sys.path.append(code_dir)
# scraping dir
scraped_data = f'{code_dir}1. Scraping/'
# data dir
data_dir = f'{code_dir}data/'
# df save sir
df_save_dir = f'{data_dir}final dfs/'
# lang models dir
llm_path = f'{data_dir}Language Models/'
# models dir
models_save_path = f'{data_dir}classification models/'
# output tables dir
table_save_path = f'{data_dir}output tables/'
# plots dir
plot_save_path = f'{data_dir}plots/'
# Make sure path exist and make dir if not
all_dir_list = [
scraped_data, data_dir, df_save_dir, llm_path, models_save_path,
]
# %%
import os  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
import sys  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
from pathlib import Path  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
mod = sys.modules[__name__]
code_dir = None
code_dir_name = 'Code'
unwanted_subdir_name = 'Analysis'
for _ in range(5):
parent_path = str(Path.cwd().parents[_]).split('/')[-1]
if (code_dir_name in parent_path) and (unwanted_subdir_name not in parent_path):
code_dir = str(Path.cwd().parents[_])
if code_dir is not None:
break
# %%
# Set paths
# MAIN DIR
main_dir = f'{str(Path(code_dir).parents[0])}/'
# code_dir
code_dir = f'{code_dir}/'
sys.path.append(code_dir)
# scraping dir
scraped_data = f'{code_dir}1. Scraping/'
# data dir
data_dir = f'{code_dir}data/'
# df save sir
df_save_dir = f'{data_dir}final dfs/'
# lang models dir
llm_path = f'{data_dir}Language Models/'
# models dir
models_save_path = f'{data_dir}classification models/'
# output tables dir
table_save_path = f'{data_dir}output tables/'
# plots dir
plot_save_path = f'{data_dir}plots/'
# Make sure path exist and make dir if not
all_dir_list = [
scraped_data, data_dir, df_save_dir, llm_path, models_save_path,
]
print('data_dir')
# %%
import os  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
import sys  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
from pathlib import Path  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
mod = sys.modules[__name__]
code_dir = None
code_dir_name = 'Code'
unwanted_subdir_name = 'Analysis'
for _ in range(5):
parent_path = str(Path.cwd().parents[_]).split('/')[-1]
if (code_dir_name in parent_path) and (unwanted_subdir_name not in parent_path):
code_dir = str(Path.cwd().parents[_])
if code_dir is not None:
break
# %%
# Set paths
# MAIN DIR
main_dir = f'{str(Path(code_dir).parents[0])}/'
# code_dir
code_dir = f'{code_dir}/'
sys.path.append(code_dir)
# scraping dir
scraped_data = f'{code_dir}1. Scraping/'
# data dir
data_dir = f'{code_dir}data/'
# df save sir
df_save_dir = f'{data_dir}final dfs/'
# lang models dir
llm_path = f'{data_dir}Language Models/'
# models dir
models_save_path = f'{data_dir}classification models/'
# output tables dir
table_save_path = f'{data_dir}output tables/'
# plots dir
plot_save_path = f'{data_dir}plots/'
# Make sure path exist and make dir if not
all_dir_list = [
scraped_data, data_dir, df_save_dir, llm_path, models_save_path,
]
print(data_dir)
# %%
!pip install jupyter ipykernel
import os  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
import sys  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
from pathlib import Path  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
mod = sys.modules[__name__]
code_dir = None
code_dir_name = 'Code'
unwanted_subdir_name = 'Analysis'
for _ in range(5):
parent_path = str(Path.cwd().parents[_]).split('/')[-1]
if (code_dir_name in parent_path) and (unwanted_subdir_name not in parent_path):
code_dir = str(Path.cwd().parents[_])
if code_dir is not None:
break
# %%
# Set paths
# MAIN DIR
main_dir = f'{str(Path(code_dir).parents[0])}/'
# code_dir
code_dir = f'{code_dir}/'
sys.path.append(code_dir)
# scraping dir
scraped_data = f'{code_dir}1. Scraping/'
# data dir
data_dir = f'{code_dir}data/'
# df save sir
df_save_dir = f'{data_dir}final dfs/'
# lang models dir
llm_path = f'{data_dir}Language Models/'
# models dir
models_save_path = f'{data_dir}classification models/'
# output tables dir
table_save_path = f'{data_dir}output tables/'
# plots dir
plot_save_path = f'{data_dir}plots/'
# Make sure path exist and make dir if not
all_dir_list = [
scraped_data, data_dir, df_save_dir, llm_path, models_save_path,
]
print(data_dir)
# %%
!pip install jupyter ipykernel
import os  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
import sys  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
from pathlib import Path  # type:ignore # isort:skip # fmt:skip # noqa # nopep8
mod = sys.modules[__name__]
code_dir = None
code_dir_name = 'Code'
unwanted_subdir_name = 'Analysis'
for _ in range(5):
parent_path = str(Path.cwd().parents[_]).split('/')[-1]
if (code_dir_name in parent_path) and (unwanted_subdir_name not in parent_path):
code_dir = str(Path.cwd().parents[_])
if code_dir is not None:
break
# %%
# Set paths
# MAIN DIR
main_dir = f'{str(Path(code_dir).parents[0])}/'
# code_dir
code_dir = f'{code_dir}/'
sys.path.append(code_dir)
# scraping dir
scraped_data = f'{code_dir}1. Scraping/'
# data dir
data_dir = f'{code_dir}data/'
# df save sir
df_save_dir = f'{data_dir}final dfs/'
# lang models dir
llm_path = f'{data_dir}Language Models/'
# models dir
models_save_path = f'{data_dir}classification models/'
# output tables dir
table_save_path = f'{data_dir}output tables/'
# plots dir
plot_save_path = f'{data_dir}plots/'
# Make sure path exist and make dir if not
all_dir_list = [
scraped_data, data_dir, df_save_dir, llm_path, models_save_path,
]
print(data_dir)
